package com.Exception;

/**
 * Java语言的异常以什么形式存在
 * 1. 以类的形式存在,每一个异常类都可以创建异常对象
 * 2. 异常对应现实生活:
 *  火灾(异常类):
 *      2001年3月3日,小红家着火(异常对象)
 *      2001年3月30日,小飞家着火(异常对象)
 *      2001年1月3日,小猪家着火(异常对象)
 * 3. Object下有Throwable
 *      Throwable有两个分支: Error(不可处理, 直接退出JVM) 和 Exception(可处理的)
 *      Exception有两个分支:
 *          Exception的直接子类: 编译时异常(要求程序员在编写程序阶段必须预先对这些异常进行处理, 如果不处理编译器报错, 因此叫编译时异常)
 *          RuntimeException: 运行时异常(程序员在编写阶段可以预先处理,也可以不管)
 * 4. 编译时异常和运行时异常, 都是发生在运行阶段. 编译阶段异常是不会发生的
 *  因为编译时异常必须在编译(编写)阶段预先处理, 如果不处理编译器会报错, 因此得名.
 *  所有异常都是在运行阶段发生的, 因为只有程序运行阶段才可以new对象, 因为异常的发生就是new 异常对象.
 * 5. 编译时异常(受检异常,受控异常)和运行时异常(非受检异常,非受控异常)的区别?
 *  编译时异常一般发生的概率比较高.
 *      举例:
 *          你看到外面下雨了,倾盆大雨
 *          你出门之前会预料到: 如果不打伞, 我可能会生病(生病就是一种异常)
 *          而且这个异常发生的概率很高, 所以我们出门之前要拿一把伞.
 *          "拿一把伞"就是对"生病异常"发生之前的一种处理方式.
 *
 *          对于一些发生概率较高的异常, 需要在运行之前对其进行预处理.
 *  运行时异常一般发生的概率比较低.
 *      举例: 小明走在大街上, 可能会被天上的飞机轮子砸到.
 *      被飞机轮子砸到也算一种异常.
 *      但是这种异常发生的概率较低.
 *      在程序运行阶段,你没必要提前对这种发生概率较低的异常进行预处理.
 *      如果你处理这种异常, 你将活得很累.
 *
 *  假设你在出门之前, 你把出门之前, 你把能够发生异常都预先处理, 你这个人会更加的安全, 但是你这个人会活得很累.
 *
 *  假如java中没有对异常进行划分,没有分为:编译时异常和运行时异常,
 *  所有的异常都需要在编写程序阶段对其进行预处理, 将是怎样的效果
 *  首先, 如果这样的话, 程序肯定绝对的安全.
 *  但是程序员编写很累, 代码导出都是处理异常的代码.
 */
public class ExceptionTest02 {
    public static void main(String[] args) {

        // 通过"异常类"实例化"对象"
        NumberFormatException nfe = new NumberFormatException("数字格式化异常");
        System.out.println(nfe);
    }
}
